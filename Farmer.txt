using System;
using System.IO;

namespace Problem51Nod
{
    class Program
    {
        static void Main()
        {
            StreamReader sr = new StreamReader(Console.OpenStandardInput());
            StreamWriter sw = new StreamWriter(Console.OpenStandardOutput());
            string[] input = sr.ReadLine().Split(' ');
            int n = Convert.ToInt32(input[0]);
            int m = Convert.ToInt32(input[1]);
            int[,] matrix = new int[m, n];

            for (int i = 0; i < n; i++)
            {
                string inputLine = sr.ReadLine();
                for (int j = 0; j < m; j++)
                    matrix[j, i] = Convert.ToInt32(inputLine[j] - '0');
            }

            var result = Cal(matrix);

            for (int i = 1; i <= n; i++)
            {
                for (int j = 1; j <= m; j++)
                {
                    if (j == m)
                        sw.Write(result[j, i]);
                    else
                        sw.Write(result[j, i] + " ");
                }

                sw.WriteLine();
            }

            sw.Flush();
        }
        static int[,] Cal(int[,] matrix)
        {
            int m = matrix.GetLength(0);
            int n = matrix.GetLength(1);

            int[,] count = new int[m, n];
            int[,] result = new int[m + 1, n + 1];

            for (int i = 0; i < m; i++)
                count[i, 0] = matrix[i, 0];

            for (int i = 0; i < m; i++)
                for (int j = 1; j < n; j++)
                    if (matrix[i, j] == 1)
                        count[i, j] = count[i, j - 1] + 1;

            for (int i = 0; i < n; i++)
            {
                int[] stack = new int[m];
                int[] left = new int[m + 1];
                int endIndex = -1;

                for (int j = 0; j <= m; j++)
                {
                    int cHeight = j == m ? 0 : count[j, i];
                    left[j] = j;

                    while (endIndex >= 0 && cHeight < count[stack[endIndex], i])
                    {
                        int height = count[stack[endIndex], i];
                        left[j] = left[stack[endIndex]];
                        int width = j - left[stack[endIndex]];
                        endIndex--;

                        int mHeight = endIndex >= 0 ? Math.Max(cHeight, count[stack[endIndex], i]) : cHeight;
                        result[width, height]++;
                        result[width, mHeight]--;
                    }

                    if (endIndex == -1 || cHeight > count[stack[endIndex], i])
                        stack[++endIndex] = j;
                }
            }

            for (int i = n; i > 0; i--)
                for (int j = 0; j <= m; j++)
                    result[j, i - 1] += result[j, i];

            for (int i = m; i > 0; i--)
                for (int j = 0; j <= n; j++)
                    result[i - 1, j] += result[i, j];

            for (int i = m; i > 0; i--)
                for (int j = 0; j <= n; j++)
                    result[i - 1, j] += result[i, j];

            return result;
        }
    }
}