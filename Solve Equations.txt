using System;
using System.Linq;

namespace Solve_Equations
{	
	class Program
	{
	
		static long GCD (long a, long b, ref long x, ref long y) {
		if (a == 0) {
			x = 0; y = 1;
			return b;
		}
		long x1 = 0, y1 = 0;
		long d = GCD (b%a, a, ref x1, ref y1);
		x = y1 - (b / a) * x1;
		y = x1;
		return d;
		}		 

		static bool Solve(long a, long b, long c, ref long x0, ref long y0) {
		long g = GCD (Math.Abs(a), Math.Abs(b), ref x0, ref y0);
		if (c % g != 0)
			return false;
		x0 *= c / g;
		y0 *= c / g;
		if (a < 0)   x0 *= -1;
		if (b < 0)   y0 *= -1;
		
		// Find with smallest x
		if (x0 > 0)
		{
			long sig = ((b/g) > 0) ? -1 : 1;
			long z = Math.Max(1, Math.Abs(x0*g/b));
			if (x0 + z*(sig*b/g) > 0)
			{
				x0 += z*sig*b/g;
				y0 -= z*sig*a/g;				
			}			
			while (x0 + (sig*b/g) > 0)
			{
				x0 += sig*b/g;
				y0 -= sig*a/g;
			}		
		}
		else
		{	
			while (x0 <= 0)
			{
				long z = Math.Max(1, Math.Abs(x0*g/b)-1);
				x0 += z*b/g;
				y0 -= z*a/g;
			}
		}
		
		// Now find closest to origin
		var s = x0*x0 + y0*y0;
		var sg = ((b/g) > 0) ? 1 : -1;
		var tx = x0;
		var ty = y0;
		while (true)
		{
			tx += sg*b/g;
			ty -= sg*a/g;
			var ns = tx*tx + ty*ty;
			if (ns < s)
			{
				s = ns;
				x0 = tx;
				y0 = ty;
			}
			else
			{
				break;
			}
		}				
		
		return true;
		}	
		
		public static void Main(string[] args)
		{
			int q = int.Parse(Console.ReadLine());
			for (int i=0; i<q; ++i)
			{
				long[] av = Console.ReadLine().Split(' ').Select(s=>long.Parse(s)).ToArray();
				long x = 0,y = 0;
				if (Solve(av[0], av[1], av[2], ref x, ref y))
				{
					Console.WriteLine(x+" "+y);
				}
			}
		}
	}
}