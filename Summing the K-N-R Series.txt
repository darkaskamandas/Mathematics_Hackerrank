using System;
using System.IO;

namespace Problem51Nod
{
    class Program
    {
        static long[,] CMatrix;
        static int Mod = 1000000007;

        public static void Main(String[] args)
        {
            CMatrix = GenCmn(1003);
            int t = Convert.ToInt32(Console.ReadLine());

            for (int i = 0; i < t; i++)
            {                
                int k = Convert.ToInt32(Console.ReadLine());
                long n = Convert.ToInt64(Console.ReadLine());
                long r = Convert.ToInt64(Console.ReadLine());
                Console.WriteLine(Cal(k, n, r));
            }
        }

        static long Cal(int k, long n, long r)
        {
            if (n == 1) return r;

            long[] result = new long[k + 1];
            long inv = Inv(r - 1, Mod);
            long power = PowerMod(r, n + 1, Mod);
            result[0] = ((power - 1) * inv - 1 + Mod) % Mod;

            for (int i = 1; i <= k; i++)
            {
                long sum = 0;

                for (int j = 1; j <= i; j++)
                {
                    long v  = CMatrix[i, j] * result[i - j] % Mod;
                    sum += j % 2 == 1 ? v : -v;
                }

                long last = power * PowerMod(n, i, Mod) % Mod;
                sum = (last - sum % Mod + Mod) % Mod;
                result[i] = (sum * inv % Mod + Mod) % Mod;
            }

            return result[k];
        }

        static long[,] GenCmn(int n)
        {
            long[,] cmn = new long[n + 1, n + 1];

            for (int i = 0; i <= n; i++)
                cmn[i, 0] = cmn[i, i] = 1;

            for (int i = 2; i <= n; i++)
                for (int j = 1; j * 2 <= i; j++)
                    cmn[i, j] = cmn[i, i - j] = (cmn[i - 1, j - 1] + cmn[i - 1, j]) % Mod;

            return cmn;
        }
        
        static long PowerMod(long a, long power, long n)
        {
            a %= n;
            long mod = 1;

            while (power != 0)
            {
                if ((power & 1) == 1)
                    mod = mod * a % n;

                a = a * a % n;
                power >>= 1;
            }

            return mod;
        }

        public static long Inv(long e, long f)
        {
            long x2 = 0, x3 = f, y2 = 1, y3 = e, q, t2, t3;
            while (true)
            {
                if (y3 == 0) return 0;
                if (y3 == 1)
                {
                    if (y2 < 0) y2 += f;
                    return y2;
                }
                q = x3 / y3;
                t2 = x2 - q * y2;
                t3 = x3 - q * y3;
                x2 = y2; x3 = y3;
                y2 = t2; y3 = t3;
            }
        }
    }
}