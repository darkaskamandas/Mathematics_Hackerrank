#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cassert>
#include <cstdio>
#include <queue>
#include <set>
#include <map>
#include <fstream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <algorithm>
#include <numeric>

#define mp make_pair
#define mt make_tuple
#define fi first
#define se second
#define pb push_back
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define fore(i, a, b) for (int i = (int)(a); i <= (int)(b); ++i)

using namespace std;

typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<pii> vpi;
typedef vector<vi> vvi;
typedef long long i64;
typedef vector<i64> vi64;
typedef vector<vi64> vvi64;

template<class T> bool uin(T &a, T b) { return a > b ? (a = b, true) : false; }
template<class T> bool uax(T &a, T b) { return a < b ? (a = b, true) : false; }

pair<double, double> ex[31][31][901];
int n, m;
double r;

pair<double, double> operator*(double x, pair<double, double> t) {
    return mp(x * t.fi, x * t.se);
}

pair<double, double> operator+(pair<double, double> r, pair<double, double> t) {
    return mp(r.fi + t.fi, r.se + t.se);
}


pair<double, double> get_ex(int a, int b, int k) {
    if (a == n && b == m) return mp(0, 0);
    if (a > n || b > m || k > a * b) return mp(0, 0);
    auto &res = ex[a][b][k];
    if (res.fi > -0.5) return res;
    res = mp(0.0, 1.0);
    res = res + (1.0 * (n - a) * (m - b) / n / m) * get_ex(a + 1, b + 1, k + 1);
    res = res + (1.0 * a * (m - b) / n / m) * get_ex(a, b + 1, k + 1);
    res = res + (1.0 * (n - a) * b / n / m) * get_ex(a + 1, b, k + 1);
    res = res + (1.0 * (a * b - k) / n / m) * get_ex(a, b, k + 1);
    res = res + (1.0 * k / n / m * r) * mp(1.0, -1.0);
    res = (1.0 / (1.0 - 1.0 * k / n / m * (1.0 - r))) * res;
    return res;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.precision(10);
    cout << fixed;
#ifdef LOCAL_DEFINE
    freopen("input.txt", "rt", stdin);
#endif

    cin >> n >> m >> r;
    forn(i, n + 1) forn(j, m + 1) forn(k, n * m + 1) ex[i][j][k] = mp(-1, -1);
    auto w = get_ex(0, 0, 0);
//    cerr << w.fi << ' ' << w.se << '\n';
    cout << w.se / (1 - w.fi) << '\n';

#ifdef LOCAL_DEFINE
    cerr << "Time elapsed: " << 1.0 * clock() / CLOCKS_PER_SEC << " s.\n";
#endif
    return 0;
}