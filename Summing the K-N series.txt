using System;
using System.IO;

namespace Problem51Nod
{
    class Program
    {
        static long[,] CMatrix;
        static long[] Bn;
        static int Mod = 1000000007;

        public static void Main(String[] args)
        {
            StreamReader sr = new StreamReader(Console.OpenStandardInput());
            StreamWriter sw = new StreamWriter(Console.OpenStandardOutput());

            CMatrix = GenCmn(1005);
            Bn = GenBn(1001);

            int t = Convert.ToInt32(sr.ReadLine());

            for (int i = 0; i < t; i++)
            {
                string[] input = sr.ReadLine().Split(' ');
                long n = Convert.ToInt64(input[0]);
                int k = Convert.ToInt32(input[1]);
                sw.WriteLine(Cal(k, n));
            }

            sw.Flush();
        }

        static long Cal(int n, long m)
        {
            if (n == 0) return m;
            long[] power = new long[n + 2];
            power[0] = 1;

            for (int i = 1; i < power.Length; i++)
                power[i] = power[i - 1] * ((m + 1) % Mod) % Mod;

            long result = 0;

            for (int k = 0; k <= n; k++)
                result += CMatrix[n + 1, k] * Bn[k] % Mod * power[n + 1 - k] % Mod;

            result %= Mod;
            long inv = Inv(n + 1, Mod);

            return result * inv % Mod;
        }

        static long[,] GenCmn(int n)
        {
            long[,] cmn = new long[n + 1, n + 1];

            for (int i = 0; i <= n; i++)
                cmn[i, 0] = cmn[i, i] = 1;

            for (int i = 2; i <= n; i++)
                for (int j = 1; j * 2 <= i; j++)
                    cmn[i, j] = cmn[i, i - j] = (cmn[i - 1, j - 1] + cmn[i - 1, j]) % Mod;

            return cmn;
        }

        static long[] GenBn(int n)
        {
            long[] bn = new long[n + 1];
            bn[0] = 1;

            for (int i = 1; i <= n; i++)
            {
                long sum = 0;
                for (int j = 0; j < i; j++)
                    sum += bn[j] * CMatrix[i + 1, j] % Mod;

                sum %= Mod;
                long inv = Inv(i + 1, Mod);
                bn[i] = (Mod - sum) * inv % Mod;

                if (i == 2) i++;
            }

            return bn;
        }

        public static long Inv(long e, long f)
        {
            long x2 = 0, x3 = f, y2 = 1, y3 = e, q, t2, t3;
            while (true)
            {
                if (y3 == 0) return 0;
                if (y3 == 1)
                {
                    if (y2 < 0) y2 += f;
                    return y2;
                }
                q = x3 / y3;
                t2 = x2 - q * y2;
                t3 = x3 - q * y3;
                x2 = y2; x3 = y3;
                y2 = t2; y3 = t3;
            }
        }
    }
}