using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using static System.Math;

class Solution {
    static bool Verbose = false;
    
    static void Main(String[] args) {
        var n = int.Parse(Console.ReadLine());
        var sol = new Solution(n);
        
        //Time("BruteForce", sol.BruteForce);
        //Time("SmartForce", sol.SmartForce);
        Time("SmartSearch", sol.SmartSearch);
    }
    
            
    public static void Time(string name, Func<double> func)
    {
        if (Verbose)
        {
            var sw = new System.Diagnostics.Stopwatch();
            sw.Restart();
            var result = func();
            sw.Stop();

            Console.WriteLine(name + ":");
            Console.WriteLine($"Result:  {result:F9}");
            Console.WriteLine("Elapsed: " + sw.Elapsed);
            Console.WriteLine();
        }
        else
        {
            var result = func();
            Console.WriteLine($"{result:F9}");
        }
    }

    int n;
    double[] sin;
    int[] sorted;
    
    public Solution(int n)
    {
        this.n = n;
        this.sin = new double[n];
        this.sorted = new int[n];
        
        for (int i=0; i<n; i++)
        {
            sin[i] = Sin(i);
            sorted[i] = i;
        }
        
        Array.Sort(sorted, (a,b) => sin[b].CompareTo(sin[a]));
    }
    
    public double BruteForce()
    {
        double max = double.MinValue;
        
        for (int i=n-2; i>0; i--)
        {
            var max2 = double.MinValue;
            int end = n-i-1;
            for (int j=i; j<=end; j++)
            {
                var k = n-i-j;
                if (k>=0) max2 = Max(max2, sin[j] + sin[k]);
            }
            max = Max(max, max2 + sin[i]);
        }

        return max;
    }
    
    public double SmartForce()
    {
        double max = -3;
        var sw = new Stopwatch();
        sw.Start();
        
        // Go through x,y,z from highest value to lowest where sx>=sy>=sz
        
        for (int i=0; i<n; i++)
        {
            var x = sorted[i];
            var sx = sin[x];
            if (max>=sx*3) break;
            
            var max2 = max-sx;
            for (int j=i; j<n; j++)
            {
                var y = sorted[j];
                var sy = sin[y];
                if (max2>=sy*2) break;

                var z = n-x-y;
                if (z<=0) continue;
                var sz = sin[z];
                if (sz>sy) continue; // Already seen
                
                max2 = Max(max2, sy + sz);
            }
            
            var newMax = max2 + sx;
            if (newMax > max)
                max = newMax;
            
            if (sw.ElapsedMilliseconds > 2500)
                break;
        }

        return max;
    }
    
    public struct Pair : IComparable<Pair>
    {
        public readonly int x;
        public readonly int y;
        public readonly double sum;
        
        public Pair(Solution sol, int x, int y)
        {
            this.x = x;
            this.y = y;
            this.sum = sol.sin[sol.sorted[x]] + sol.sin[sol.sorted[y]];
        }

        public int CompareTo(Pair pair)
        {
            int cmp = sum.CompareTo(pair.sum);
            if (cmp == 0)
                cmp = -x.CompareTo(pair.x);
            if (cmp == 0)
                cmp = -y.CompareTo(pair.y);
            return cmp;
        }
        
        public override string ToString()
        {
            return $"({x},{y},{sum})";
        }
    }
    
    public class Heap<T>
    {
        Comparison<T> comparison;
        List<T> list;

        public Heap(int n, Comparison<T> comparison = null)
        {
            this.comparison = comparison ?? Comparer<T>.Default.Compare;
            list = new List<T>(n);
        }

        public int Count => list.Count;

        public T FindMin() => list[0];

        public T Dequeue()
        {
            var pop = list[0];
            var elem = list[list.Count - 1];
            list.RemoveAt(list.Count - 1);

            if (list.Count > 0)
            {
                int i = 0;
                list[i] = elem;
                while (true)
                {
                    int child = 2*i + 1;
                    if (child >= list.Count)
                        break;

                    if (child + 1 < list.Count && comparison(list[child], list[child + 1]) > 0)
                        child++;

                    if (comparison(list[child], elem) >= 0)
                        break;

                    Swap(i, child);
                    i = child;
                }
            }

            return pop;
        }
            
        public void ReplaceTop(T elem)
        {
            int i = 0;
            list[i] = elem;
            while (true)
            {
                int child = 2*i + 1;
                if (child >= list.Count)
                    break;

                if (child + 1 < list.Count && comparison(list[child], list[child + 1]) > 0)
                    child++;

                if (comparison(list[child], elem) >= 0)
                    break;

                Swap(i, child);
                i = child;
            }
        }            

        public void Enqueue(T push)
        {
            list.Add(push);
            int i = list.Count - 1;
            while (i > 0)
            {
                int parent = (i - 1)/2;
                if (comparison(list[parent], push) <= 0)
                    break;
                Swap(i, parent);
                i = parent;
            }
        }

        void Swap(int t1, int t2)
        {
            T tmp = list[t1];
            list[t1] = list[t2];
            list[t2] = tmp;
        }
    }
    
    const int Period = 710;
    public double SmartSearch()
    {
        if (n<1000)
            return SmartForce();
        
        var watch = new Stopwatch();
        watch.Start();
            
        int r = n % Period;

        // Create buckets
        var  buckets = new List<Bucket>( Period * (Period+1)/2 );
        for (int i=0; i<Period; i++)
        {
            var pni = 2*Period + r - i;
            var sini = sin[i];
            for (int j=0; j<=i; j++)
            {
                var k = (pni - j) % Period;
                if (k>j) continue;  // i >= j >= k to eliminate redundancy
                var v = sini + sin[j] + sin[k];
                buckets.Add(new Bucket { i=(short)i, j=(short)j, k=(short)k, sin=v });
            }
        }
        buckets.Sort((a,b)=>b.CompareTo(a));

        double max = -3;
        int current = 1;
        int count = 10;
        
        foreach(var b in buckets)
        {
            var prevMax = max;
            var m = (int) Math.Ceiling(n / (double) Period);
            for (int i=0; i<m; i++)
            {
                var x = i*Period + b.i;
                if (x>=n) continue;
                
                for (int j=0; j<m; j++)
                {
                    var y = j*Period + b.j;
                    var z = n-x-y;

                    if (y>=n || z<0) continue;

                    var v = sin[x] + sin[y] + sin[z];
                    if (v > max)
                        max = v;
                }
            }
            
            if (Verbose && current>1 && prevMax != max)
            {
                Console.WriteLine($"At #{current} Max {prevMax} --> {max}");
            }
            
            if (current++>=count) break;
            
            if (watch.ElapsedMilliseconds > 2500)
            {
                if (Verbose) Console.WriteLine("Timed out...");
                break;
            }
        }

        /*
        for (int i=0; i<20; i++)
            Console.WriteLine($"{i}) {buckets[i]}");
        */
        
        return max;        
    }
    
    public struct Bucket : IComparable<Bucket>
    {
        public double sin;
        public short i;
        public short j;
        public short k;
        
        public int CompareTo(Bucket bucket)
        {
            int cmp = sin.CompareTo(bucket.sin);
            if (cmp == 0)
                cmp = i.CompareTo(bucket.i);
            if (cmp == 0)
                cmp = j.CompareTo(bucket.j);
            return cmp;
        }
        
        public override string ToString()
        {
            return $"{sin} ({i},{j},{k})";
        }
    }
    
}