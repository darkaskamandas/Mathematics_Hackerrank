using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;

// ()
public class Solver
{
    public void Solve()
    {
        for (int tt = ReadInt(); tt > 0; tt--)
        {
            int n = ReadInt();
            var a = ReadIntMatrix(n);

            bool f11 = true, f12 = true, f3 = true, f6 = true, f7 = true, f8 = true;
            int e = -1;
            for (int i = 0; i < n; i++)
            {
                if (a[i][i] != i)
                    f8 = false;
                bool ok2 = true;
                for (int j = 0; j < n; j++)
                {
                    int count11 = 0, count12 = 0;
                    for (int k = 0; k < n; k++)
                    {
                        if (a[i][k] == j)
                            count11++;
                        if (a[k][i] == j)
                            count12++;

                        if (a[a[i][j]][k] != a[i][a[j][k]])
                            f3 = false;
                        if (a[i][a[j][k]] != a[a[i][j]][a[i][k]])
                            f7 = false;
                    }
                    if (count11 != 1)
                        f11 = false;
                    if (count12 != 1)
                        f12 = false;

                    if (a[j][i] != j || a[i][j] != j)
                        ok2 = false;

                    if (a[i][j] != a[j][i])
                        f6 = false;
                }
                if (ok2)
                {
                    if (e == -1)
                        e = i;
                    else
                        e = -1;
                }
            }

            bool f5 = true;
            for (int i = 0; i < n; i++)
            {
                bool ok5 = false;
                for (int j = 0; j < n; j++)
                {
                    if (a[i][j] == e && a[j][i] == e)
                        ok5 = true;
                }
                if (!ok5)
                    f5 = false;
            }

            int ans = 0;
            if (f11 && f12)
                ans += 1;
            if (ans > 0 && e >= 0)
                ans += 2;
            if (f3)
                ans += 4;
            if (f3 && e >= 0)
                ans += 8;
            if (ans > 7 && f5)
                ans += 16;
            if (ans > 15 && f6)
                ans += 32;
            if (f7 && f11)
                ans += 64;
            if (ans > 63 && f8)
                ans += 128;
            Write(ans);
        }
    }

    
    #region Main

    protected static TextReader reader;
    protected static TextWriter writer;

    static void Main()
    {
#if DEBUG
        reader = new StreamReader("..\\..\\input.txt");
        writer = Console.Out;
        //writer = new StreamWriter("..\\..\\output.txt");
#else
        reader = new StreamReader(Console.OpenStandardInput());
        writer = new StreamWriter(Console.OpenStandardOutput());
        //reader = new StreamReader("subsequences.in");
        //writer = new StreamWriter("subsequences.out");
#endif
        try
        {
//            var thread = new Thread(new Solver().Solve, 1024 * 1024 * 256);
//            thread.Start();
//            thread.Join();
            new Solver().Solve();    
        }
        catch (Exception ex)
        {
#if DEBUG
            Console.WriteLine(ex);
#else
            Console.WriteLine(ex);
            throw;
#endif
        }
        reader.Close();
        writer.Close();
    }

    #endregion

    #region Read / Write

    private static Queue<string> currentLineTokens = new Queue<string>();

    private static string[] ReadAndSplitLine()
    {
        return reader.ReadLine().Split(new[] { ' ', '\t' }, StringSplitOptions.RemoveEmptyEntries);
    }

    public static string ReadToken()
    {
        while (currentLineTokens.Count == 0)
            currentLineTokens = new Queue<string>(ReadAndSplitLine());
        return currentLineTokens.Dequeue();
    }

    public static int ReadInt()
    {
        return int.Parse(ReadToken());
    }

    public static long ReadLong()
    {
        return long.Parse(ReadToken());
    }

    public static double ReadDouble()
    {
        return double.Parse(ReadToken(), CultureInfo.InvariantCulture);
    }

    public static int[] ReadIntArray()
    {
        return ReadAndSplitLine().Select(int.Parse).ToArray();
    }

    public static long[] ReadLongArray()
    {
        return ReadAndSplitLine().Select(long.Parse).ToArray();
    }

    public static double[] ReadDoubleArray()
    {
        return ReadAndSplitLine().Select(s => double.Parse(s, CultureInfo.InvariantCulture)).ToArray();
    }

    public static int[][] ReadIntMatrix(int numberOfRows)
    {
        int[][] matrix = new int[numberOfRows][];
        for (int i = 0; i < numberOfRows; i++)
            matrix[i] = ReadIntArray();
        return matrix;
    }

    public static int[][] ReadAndTransposeIntMatrix(int numberOfRows)
    {
        int[][] matrix = ReadIntMatrix(numberOfRows);
        int[][] ret = new int[matrix[0].Length][];
        for (int i = 0; i < ret.Length; i++)
        {
            ret[i] = new int[numberOfRows];
            for (int j = 0; j < numberOfRows; j++)
                ret[i][j] = matrix[j][i];
        }
        return ret;
    }

    public static string[] ReadLines(int quantity)
    {
        string[] lines = new string[quantity];
        for (int i = 0; i < quantity; i++)
            lines[i] = reader.ReadLine().Trim();
        return lines;
    }

    public static void WriteArray<T>(IEnumerable<T> array)
    {
        writer.WriteLine(string.Join(" ", array));
    }

    public static void Write(params object[] array)
    {
        WriteArray(array);
    }

    public static void WriteLines<T>(IEnumerable<T> array)
    {
        foreach (var a in array)
            writer.WriteLine(a);
    }

    #endregion
}