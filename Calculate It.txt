using System;
using System.Numerics;

namespace Solution
{
    class Solution
    {
        public static BigInteger[,] CMatrix, PowerOf, Dp;
        public static int[] ModHash = new int[] { 0, 1, 255, 242, 255, 624, 385, 342, 511, 491, 499 };
        public static int Mod;

        public static void Main(String[] args)
        {
            string temp = Console.ReadLine();
            string[] temp_arr = temp.Split(' ');
            int p = Convert.ToInt32(temp_arr[0]);
            if(!(2 <= p && p <= 10))
            {
                Console.WriteLine("fail");
            }
            BigInteger n = BigInteger.Parse(temp_arr[1]);
            if(!(1 <= n && n <= BigInteger.Pow(p,50)))
            {
                Console.WriteLine("fail");
            }
            Mod = ModHash[p];
            Dp = new BigInteger[Mod, 51];
            Console.WriteLine(Cal(n, p));
        }

        public static BigInteger Cal(BigInteger n, int p)
        {
            if (n % p != 0)
                n = n / p * p;

            BigInteger powerValue = 1;
            int power = 0;

            while (powerValue < n)
            {
                powerValue *= p;
                power++;
            }

            InitData(power + 1, p);
            return Count(n, power);
        }

        public static BigInteger Count(BigInteger x, int y)
        {
            if (x < 0) return 0;
            if (x == 0 || y <= 0) return 1;
            int code = (int)(x % Mod);

            if (Dp[code, y] == 0)
            {
                BigInteger result = 0;

                if (x >= PowerOf[y, y])
                {
                    for (int i = 1; i <= y + 1; i++)
                    {
                        if ((i & 1) == 0)
                            result -= Count(x - PowerOf[y, i], y) * CMatrix[y + 1, i];
                        else
                            result += Count(x - PowerOf[y, i], y) * CMatrix[y + 1, i];
                    }
                }
                else
                    result = Count(x - PowerOf[y, 0], y) + Count(x, y - 1);

                Dp[code, y] = result;
            }

            return Dp[code, y];
        }

        public static void InitData(int max, int p)
        {
            PowerOf = new BigInteger[max, max];
            PowerOf[0, 0] = 1;

            for (int i = 1; i < max; i++)
            {
                PowerOf[i, 0] = PowerOf[i - 1, 0] * p;
                for (int j = 1; j < max; j++)
                    PowerOf[i, j] = PowerOf[i, 0] * j;
            }

            CMatrix = new BigInteger[max, max];
            for (int i = 0; i < max; i++)
                CMatrix[i, 0] = CMatrix[i, i] = 1;

            for (int i = 2; i < max; i++)
                for (int j = 1; j * 2 <= i; j++)
                    CMatrix[i, j] = CMatrix[i, i - j] = CMatrix[i - 1, j - 1] + CMatrix[i - 1, j];
        }
    }
}